## preview
잠긴다는 개념이 추가된 영역 개수 구하기.     

최대 높이까지 수위를 올려가며 dfs로 영역의 최대 개수를 구하면 될 듯 하다.

## 1트

```
#include <bits/stdc++.h>
using namespace std;

int grp[101][101];
int drn[101][101];
int visited[101][101];
int n;
vector<int> res;

int xMv[4] = {0, 1, 0, -1};
int yMv[4] = {1, 0, -1, 0};


void dfs(int x, int y)
{
    visited[y][x] = 1;
    int nx, ny;
    for (int i=0; i<4; i++)
    {
        nx = x + xMv[i]; ny = y + yMv[i];
        if ( (0 <= nx && nx < n) && (0 <= ny && ny < n) && !visited[ny][nx] && !drn[ny][nx]) dfs(nx, ny);
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> n;
    
    int mxHgt = 0;
    //입력
    for (int i=0; i<n; i++)
    {
        for (int j=0; j<n; j++)
        {
            int hgt;
            cin >> hgt;
            if (hgt > mxHgt) mxHgt = hgt;
            grp[i][j] = hgt;
        }
    }
    
    res.resize(mxHgt);
    
    int nums = 0;
    for (int t=1; t<mxHgt; t++)
    {
        //물에 잠긴 지역 설정
        for (int i=0; i<n; i++)
        {
            for (int j=0; j<n; j++)
            {
                if (grp[i][j] < t) drn[i][j] = 1;
            }
        }
        
        //dfs로 영역 개수 구하기
        for (int i=0; i<n; i++)
        {
            for (int j=0; j<n; j++)
            {
                if (!visited[i][j] && !drn[i][j])
                {
                    dfs(j, i);
                    nums++;
                }
            }
        }
        res[t-1] = nums;
        nums = 0;
        memset(visited, 0, 101 * 101 * sizeof(int));
    }
    
    int rep = *max_element(res.begin(), res.end());

    cout << rep;
    
    return 0;
}
```

